==================================================Processor==================================================
<torchaudio.pipelines._tts.impl._EnglishCharProcessor object at 0x10510ff10>
==================================================Tacotron==================================================
Tacotron2(
  (embedding): Embedding(38, 512)
  (encoder): _Encoder(
    (convolutions): ModuleList(
      (0-2): 3 x Sequential(
        (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (lstm): LSTM(512, 256, batch_first=True, bidirectional=True)
  )
  (decoder): _Decoder(
    (prenet): _Prenet(
      (layers): ModuleList(
        (0): Linear(in_features=80, out_features=256, bias=False)
        (1): Linear(in_features=256, out_features=256, bias=False)
      )
    )
    (attention_rnn): LSTMCell(768, 1024)
    (attention_layer): _Attention(
      (query_layer): Linear(in_features=1024, out_features=128, bias=False)
      (memory_layer): Linear(in_features=512, out_features=128, bias=False)
      (v): Linear(in_features=128, out_features=1, bias=False)
      (location_layer): _LocationLayer(
        (location_conv): Conv1d(2, 32, kernel_size=(31,), stride=(1,), padding=(15,), bias=False)
        (location_dense): Linear(in_features=32, out_features=128, bias=False)
      )
    )
    (decoder_rnn): LSTMCell(1536, 1024)
    (linear_projection): Linear(in_features=1536, out_features=80, bias=True)
    (gate_layer): Linear(in_features=1536, out_features=1, bias=True)
  )
  (postnet): _Postnet(
    (convolutions): ModuleList(
      (0): Sequential(
        (0): Conv1d(80, 512, kernel_size=(5,), stride=(1,), padding=(2,))
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1-3): 3 x Sequential(
        (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Sequential(
        (0): Conv1d(512, 80, kernel_size=(5,), stride=(1,), padding=(2,))
        (1): BatchNorm1d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
==================================================Vocoder==================================================
_WaveRNNVocoder(
  (_model): WaveRNN(
    (upsample): UpsampleNetwork(
      (resnet): MelResNet(
        (melresnet_model): Sequential(
          (0): Conv1d(80, 128, kernel_size=(5,), stride=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (5): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (6): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (7): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (8): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (9): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (10): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (11): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (12): ResBlock(
            (resblock_model): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (13): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
        )
      )
      (resnet_stretch): Stretch2d()
      (upsample_layers): Sequential(
        (0): Stretch2d()
        (1): Conv2d(1, 1, kernel_size=(1, 11), stride=(1, 1), padding=(0, 5), bias=False)
        (2): Stretch2d()
        (3): Conv2d(1, 1, kernel_size=(1, 11), stride=(1, 1), padding=(0, 5), bias=False)
        (4): Stretch2d()
        (5): Conv2d(1, 1, kernel_size=(1, 23), stride=(1, 1), padding=(0, 11), bias=False)
      )
    )
    (fc): Linear(in_features=113, out_features=512, bias=True)
    (rnn1): GRU(512, 512, batch_first=True)
    (rnn2): GRU(544, 512, batch_first=True)
    (relu1): ReLU(inplace=True)
    (relu2): ReLU(inplace=True)
    (fc1): Linear(in_features=544, out_features=512, bias=True)
    (fc2): Linear(in_features=544, out_features=512, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
  )
)
